stages:
  - lint
  - test
  - deploy

variables:
  POSTGRES_USER: "capfalc"
  POSTGRES_PASSWORD: ""
  POSTGRES_DB: "test_capfalc"
  POSTGRES_HOST_AUTH_METHOD: trust
  GROUP_NAME: "koenanet"
  PROJECT_NAME: "capfalc"
  REGISTRY: "registry.gitlab.com"
  IMAGE_FULL_NAME: "${REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}"

flake8:
  stage: lint
  needs: []
  image: python:3.8-alpine
  before_script:
    - apk add --update gcc musl-dev
    - pip install -r backend/requirements/code_quality.txt
  script:
    - flake8 backend --config=backend/setup.cfg --max-complexity=10

eslint:
  stage: lint
  needs: []
  image: node:14.9-alpine
  before_script:
    - cd frontend
    - yarn install
  script:
    - yarn lint

.base-docker:
  services:
    - docker:dind
  variables:
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance:
    DOCKER_DRIVER: overlay2
  image: python:3.8
  image: docker/compose:latest
  before_script:
    # Debug information:
    - docker info && docker-compose --version

test_backend:
  stage: test
  needs: [flake8]
  extends: .base-docker
  script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python backend/manage.py migrate
    - docker-compose -f local.yml up -d
    - docker-compose -f local.yml run -w /app/backend django mypy capfalc config --config=setup.cfg
    - docker-compose -f local.yml run django pytest backend/capfalc

test_frontend:
  stage: test
  needs: [eslint]
  extends: .base-docker
  script:
    - docker-compose -f local.yml build
    - docker-compose -f local.yml run --rm -w /app/frontend django yarn install
    - docker-compose -f local.yml up -d
    - docker-compose -f local.yml run -w /app/frontend django yarn test --watchAll=false --ci

deploy:
  stage: deploy
  needs: [test_backend, test_frontend]
  extends: .base-docker
  script:
    - cp -r .envs/production_template .envs/.production
    - docker-compose -f production.yml build
    # Login into Docker registry:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$REGISTRY"
    # Pushing back the result
    - docker tag capfalc_django:latest "${IMAGE_FULL_NAME}:latest"
    - docker push "${IMAGE_FULL_NAME}:latest"
  only:
    - master
